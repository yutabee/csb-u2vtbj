{"version":3,"sources":["components/ChildArea.jsx","App.jsx","index.js"],"names":["style","width","height","backgroundColor","ChildArea","memo","props","open","onClickClose","Array","keys","forEach","console","log","onClick","App","useState","text","setText","setOpen","useCallback","className","value","onChange","e","target","rootElement","document","getElementById","createRoot","render"],"mappings":"oNAGMA,EAAQ,CACZC,MAAO,OACPC,OAAQ,QACRC,gBAAiB,SAKNC,EAAYC,gBAAK,SAACC,GAC7B,IAAQC,EAAuBD,EAAvBC,KAAMC,EAAiBF,EAAjBE,aAOd,OALU,YAAOC,MAAM,KAAMC,QACxBC,SAAQ,WACXC,QAAQC,IAAI,UAIZ,mCACGN,EACC,sBAAKP,MAAOA,EAAZ,UACE,iFACA,wBAAQc,QAASN,EAAjB,mCAEA,U,MCtBK,SAASO,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,oBAAS,GAAjC,mBAAOT,EAAP,KAAaY,EAAb,KAMMX,EAAeY,uBACnB,kBAAMD,GAAQ,KACd,IAGF,OACE,mCACE,sBAAKE,UAAU,MAAf,UACE,uBAAOC,MAAOL,EAAMM,SAZL,SAACC,GAAD,OAAON,EAAQM,EAAEC,OAAOH,UAavC,uBACA,uBACA,wBAAQR,QAdM,kBAAMK,GAASZ,IAc7B,0BACA,cAACH,EAAD,CACEG,KAAMA,EACNC,aAAcA,SCrBxB,IAAMkB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACf,EAAD,S","file":"static/js/main.40c93f41.chunk.js","sourcesContent":["import React from 'react';\nimport { memo } from 'react';\n\nconst style = {\n  width: '100%',\n  height: '200px',\n  backgroundColor: 'khaki'\n};\n\n//メモを入れてすべて囲むことで再レンダリングを防止できる\n//基本的には全部入れ込むのがおすすめ\nexport const ChildArea = memo((props) => {\n  const { open, onClickClose } = props;\n\n  const data = [...Array(2000).keys()];\n  data.forEach(() => {\n    console.log('...');\n  });\n\n  return (\n    <>\n      {open ? (\n        <div style={style}>\n          <p>子コンポーネント</p>\n          <button onClick={onClickClose}>閉じる</button>\n        </div>\n      ) : null}\n    </>\n  );\n});\n","import { useState, useCallback } from 'react';\nimport { ChildArea } from './components/ChildArea';\nimport './styles.css';\n\nexport default function App() {\n  const [text, setText] = useState('');\n  const [open, setOpen] = useState(false);\n\n  const onChangeText = (e) => setText(e.target.value);\n  const onClickOpen = () => setOpen(!open);\n  //usecallback関数で子コンポーネントにで関数が使用された場合に再レンダリング防止\n  //[]の中のstateが変更された場合のみレンダリングすることができる\n  const onClickClose = useCallback(\n    () => setOpen(false),\n    []\n  );\n\n  return (\n    <>\n      <div className=\"App\">\n        <input value={text} onChange={onChangeText} />\n        <br />\n        <br />\n        <button onClick={onClickOpen}>表示</button>\n        <ChildArea\n          open={open}\n          onClickClose={onClickClose}\n        />\n      </div>\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}